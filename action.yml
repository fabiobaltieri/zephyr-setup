# SPDX-License-Identifier: Apache-2.0

name: Setup Zephyr project
description: Setup a Zephyr base project using west and downloading the Zephyr SDK

inputs:
  app-path:
    description: Application code path, should contain a west.yml file
    required: true

  sdk-version:
    description: Zephyr SDK version to use
    required: false
    default: 0.16.3

  sdk-base:
    description: Base URL of the Zephyr SDK
    required: false
    default: https://github.com/zephyrproject-rtos/sdk-ng/releases/download

  toolchains:
    description: List of toolchains to install, colon separated
    required: false
    default: arm-zephyr-eabi:riscv64-zephyr-elf

runs:
  using: "composite"
  steps:
    - name: Set SDK_FILE
      id: sdk-file
      shell: bash
      run: |
        runner="${{ runner.os }}-${{ runner.arch }}"
        if [ "$runner" = "Linux-X64" ]; then
          sdk_variant="linux-x86_64_minimal.tar.xz"
        elif [ "$runner" = "Linux-ARM64" ]; then
          sdk_variant="linux-aarch64_minimal.tar.xz"
        elif [ "$runner" = "macOS-X64" ]; then
          sdk_variant="macos-x86_64_minimal.tar.xz"
        elif [ "$runner" = "macOS-ARM64" ]; then
          sdk_variant="macos-aarch64_minimal.tar.xz"
        else
          echo "Unsupported runner platform: $runner"
        fi

        echo "SDK_FILE=zephyr-sdk-${{ inputs.sdk-version }}_${sdk_variant}" >> $GITHUB_ENV

    - name: Cache Zephyr SDK
      id: cache-toolchain
      uses: actions/cache@v3
      with:
        path: zephyr-sdk
        key: ${{ env.SDK_FILE }}-${{ inputs.toolchains }}

    - if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
      name: Download Zephyr SDK
      shell: bash
      run: |
        wget --progress=dot:giga ${{ inputs.sdk-base }}/v${{ inputs.sdk-version }}/$SDK_FILE
        mkdir zephyr-sdk
        tar xvf $SDK_FILE -C zephyr-sdk --strip-components=1

    - name: Setup Zephyr SDK
      working-directory: zephyr-sdk
      shell: bash
      run: |
        IFS=":"
        TOOLCHAINS="${{ inputs.toolchains }}"
        for toolchain in $TOOLCHAINS; do
            ./setup.sh -t $toolchain
        done
        if [ ! -d sysroots ]; then
            ./setup.sh -h
        fi
        ./setup.sh -c

    - name: Install dependencies
      shell: bash
      run: |
        pip3 install -U pip wheel
        pip3 install west
        if [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt-get install ninja-build ccache
        elif [ "${{ runner.os }}" == "macOS" ]; then
          brew install ninja ccache
        fi

    - name: Initialize
      shell: bash
      run: |
        west init -l ${{ inputs.app-path }}
        west update -o=--depth=1 -n

    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ hashFiles('zephyr/scripts/requirements*.txt') }}

    - name: Install Python packages
      shell: bash
      run: |
        pip3 install -r zephyr/scripts/requirements.txt
